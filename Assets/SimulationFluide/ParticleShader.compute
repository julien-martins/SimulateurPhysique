// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct GlobalVariable
{
    float1 time;
    float1 density;
    int numberOfParticles;
    float1 stiffness;
};

struct Particle
{
    float3 vel;
    float3 acc;
    float3 pos;
    float1 mass;
    float1 density;
};

uniform uint numberOfParticles;
float _TIME;
StructuredBuffer<Particle> _Particles;

StructuredBuffer<GlobalVariable> _Global;

RWStructuredBuffer<Particle> Result;

void CheckCollision(uint id);
float3 CalculateParticleForce(uint id, float time);

void double_density_relaxation(uint id);
void spring_displacement(uint id);
void spring_adjustement(uint id);

float distance(float3 v1, float3 v2);


[numthreads(128,1,1)]
void CSMain (uint id : SV_DispatchThreadID)
{
    float time = _Global[0].time * 2;
    float3 sum_forces = float3(0, 0, 0);
    
    //Apply Gravity
    sum_forces.y += -9.8 * Result[id].mass;

    CheckCollision(id);
    
    //Advance to the next position
    Result[id].acc = sum_forces * time;
    Result[id].vel += Result[id].acc * time;
    Result[id].pos += Result[id].vel * time;
    
    double_density_relaxation(id);

    spring_displacement(id);
    spring_adjustement(id);

    
}

void CheckCollision(uint id)
{
    if(Result[id].pos.y < 0.5)
    {
        Result[id].pos.y = -Result[id].pos.y + 2*0.5 + 0.00001f;
        Result[id].vel.y += -Result[id].vel.y * 0.8f;
    }

    /* TODO: REWORK
     * Collision with wall don't work need to review that
     *
    if(Result[id].pos.x < -4)
    {
        //Result[id].pos.x = Result[id].pos.x + 2*0.5 + 0.00001f;
        Result[id].vel.x += -Result[id].vel.x * 0.8f;
    }

    if(Result[id].pos.x > 4)
    {
        //Result[id].pos.x = -Result[id].pos.x + 2*0.5 + 0.00001f;
        Result[id].vel.x += -Result[id].vel.x * 0.8f;
    }

    if(Result[id].pos.z < -4)
    {
        //Result[id].pos.x = Result[id].pos.x + 2*0.5 + 0.00001f;
        Result[id].vel.z += -Result[id].vel.z * 0.8f;
    }

    if(Result[id].pos.z > 4)
    {
        //Result[id].pos.x = -Result[id].pos.x + 2*0.5 + 0.00001f;
        Result[id].vel.z += -Result[id].vel.z * 0.8f;
    }
    */
}

void spring_displacement(uint id)
{
    for(int i = 0; i < _Global[0].numberOfParticles; ++i)
    {
        //Pass if the particle check if his self
        if(id == i) continue;

        float3 p = Result[id].pos;
        float3 n = Result[i].pos;

        float dist = distance(p, n);
        float radius = 1.2f;

        float rest_length = 0.4;
        if(dist < radius)
        {
            float3 dir = (n - p) / dist;
            float3 D = pow(_Global[0].time, 2) * 0.4 * (1 - rest_length/radius)*(rest_length - dist)*dir;
    
            Result[id].pos -= D/2;
            Result[i].pos += D/2;
    
        }
    }
}

void spring_adjustement(uint id)
{ }

/* TODO: optimize the neighbors search
 * Need to optimize the search of neighbors with the spatial hash algorithm
 */
void double_density_relaxation(uint id)
{
    //Check all particles
    float density = 0;
    float near_density = 0;
    
    for(int i = 0; i < _Global[0].numberOfParticles; ++i)
    {
        //Pass if the particle check if his self
        if(id == i) continue;

        float3 p = Result[id].pos;
        float3 n = Result[i].pos;
        
        float dist = distance(p, n);
        float radius = 1.2f;
    
        //All neighbors && compute density and near density
        if(dist < radius)
        {
            float q = dist / radius;
            
            if(q < 1)
            {
                density += pow(1 - q, 2);
                near_density += pow(1 - q, 3);
            }
            
        }
    }
    //Compute pressure and near pressure
    float pressure = _Global[0].stiffness * (density - Result[id].density);
    float near_pressure = (_Global[0].stiffness - 0.1) * near_density;
    float dx = 0;

    //Research in all neightbors to apply displacement
    for(int i = 0; i < _Global[0].numberOfParticles; ++i)
    {
        if(id == i) continue;

        float3 p = Result[id].pos;
        float3 n = Result[i].pos;
        
        float dist = distance(p, n);
        float radius = 1.2f;

        if(dist < radius)
        {
            float q = dist /radius;
            float3 dir = (n - p) / dist;
            
            if(q < 1)
            {
                //Apply Dispacement
                float3 D = pow( _Global[0].time, 2) * ( pressure*(1-q) + near_pressure*pow(1-q, 2) ) * dir;
                Result[i].pos += D/2;
                dx -= D/2;
                
            }
        }
    }

    Result[id].pos += dx;
}

float distance(float3 v1, float3 v2)
{
    return sqrt(pow((v2.x - v1.x), 2) + pow(v2.y - v1.y, 2) + pow(v2.z - v1.z, 2));
}